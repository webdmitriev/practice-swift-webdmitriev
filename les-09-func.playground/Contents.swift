import Foundation

// MARK: func () -> ()
func sayMyName() {
    print("Oleg")
}
sayMyName()


// MARK: func (item: Type) -> ()
func printName(name: String, age: Int = 34) {
    print("Name: \(name), age: \(age)")
}
printName(name: "Oleg")

func printNames(_ names: [String]) {
    for name in names {
        print(name)
    }
}
printNames(["Oleg", "Mary", "Nata"])

func basketSumPersent(_ item1: Int,_ item2: Int,_ item3: Int, _ persent: Int = 8) -> Int {
    print((item1 + item2 + item3) * persent / 100)
    return (item1 + item2 + item3) * persent / 100
}
basketSumPersent(110, 220, 330)


// MARK: Variation params
func printNamesOnly(_ names: String...) {
    names.forEach { print($0) }
}
printNamesOnly("Oleg", "Mary", "Nata")


// MARK: func () -> (Type)
func getMyName(_ name: String) -> String {
    return "GetMyName: \(name)"
}
var myName: String = getMyName("Oleg")


func getCharsName(_ name: String) -> [Character] {
    var arr: [Character] = []
    name.forEach { arr.append($0) }
    
    return arr
}
getCharsName("Oleg")


var herName: String = "Mary"
func changeName(_ name: inout String) {
    name += "!"
}
changeName(&herName)


// MARK: –°–∫–≤–æ–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
var num = 10
func changeValue(mainValue: inout Int) {
    mainValue *= 2
}
changeValue(mainValue: &num)


// LES TASK
func printOnlyNames(_ elements: String...) -> [String] {
    var arr: [String] = []
    
    for el in elements {
        let firstCharUpper = el.first!.uppercased()
        let firstChar = el.first!
        
        if firstCharUpper == String(firstChar) {
            arr.append(el)
        }
        
    }
    
    
    return arr
}
printOnlyNames("Oleg", "dog", "home", "Mary", "work", "cat")






// MARK: - Homework —É—Ä–æ–∫ 9 –§—É–Ω–∫—Ü–∏–∏ (func)
/*
    1) –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –Ω–µ–π–º–∏–Ω–≥:
        - –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
        - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 2(Int), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1(Double)
        - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –¥–≤–∞ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö "–í–∞—Ä–∏–∞—Ç–∏–≤–Ω—ã–µ"
        - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª-–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–ø–∞ Float, —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤ –º–∞—Å—Å–∏–≤, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ [Float]
        - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 3 –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –°–ª–æ–≤–∞—Ä—å ‚Üí [Int: (String, String) ]:
            –£ –ø–µ—Ä–≤–æ–≥–æ –Ω–µ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –∏–º–µ–Ω–∏, –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ
            –£ –≤—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –∏ –≤–Ω–µ—à–Ω–µ–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏–º—è
            –£ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–µ–µ –∏–º—è + –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        –ù–µ –∑–∞–±—É–¥—å –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ :)

    2) –û–ø–∏—Å–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É round() floor() ceil() –∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã.
        P.S –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ import Foundation :)

    3) –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–ò–º—è, —Ä–æ—Å—Ç, –≤–µ—Å, –≤–æ–∑—Ä–∞—Å—Ç) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 (String)
        –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º—É–ª—É –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢)

        –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
            –ò–ú–¢ = m / h^2
            m - –º–∞—Å—Å–∞ —Ç–µ–ª–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
            h - —Ä–æ—Å—Ç –≤ –º–µ—Ç—Ä–∞—Ö
 
        –ù–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Å—Å–∞ —á–µ–ª–æ–≤–µ–∫–∞ = 60 –∫–≥, —Ä–æ—Å—Ç = 170 —Å–º.

    –ò–ú–¢ = 60 : (1,7 √ó 1,7) * 20,7612457 –∫–≥/–º2 (–û–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ —Å–æ—Ç—ã—Ö –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏) —Å–º. –ø—É–Ω–∫—Ç 2
 
    –ù—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å.

    –ü—Ä–∏–º–µ—Ä—ã –≤—ã–≤–æ–¥–∞:
    "–ê–ª–µ–∫—Å–µ–π: –ò–ú–¢ = 22.5 \n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –≤–µ—Å –≤ –Ω–æ—Ä–º–µ! "
 
    "–ú–∞—à–∞: –ò–ú–¢ = 17.3" \n–°—Ä–æ—á–Ω–æ –∫—É—à–∞—Ç—å! \n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞ :("
 
 

    –§—É–Ω–∫—Ü–∏–∏ - –î–û–ú–ê–®–ö–ê
    –î–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –¥–æ–º–∞—à–∫–µ:
    –¢–∞–π–º–∫–æ–¥: 1:05:00

    –î–û–ü–û–õ–ù–ï–ù–ò–ï –ü–û –û–ö–†–£–ì–õ–ï–ù–ò–Æ:
    –ü–æ–ø—Ä–∞–≤–∫–∞, –µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –æ–∫—Ä—É–≥–ª—è—Ç—å –ò–ú–¢ —á–µ—Ä–µ–∑ round() floor() ceil(), —Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ –¶–ï–õ–´–•, –∞ –Ω–µ –¥–æ —Å–æ—Ç—ã—Ö. –¢–∞–∫ —á—Ç–æ –º–æ–∂–µ—Ç–µ –æ–∫—Ä—É–∑–ª—è—Ç—å –¥–æ –¶–ï–õ–´–•.

    * –ù–æ –µ—Å–ª–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ —Å–æ—Ç—ã—Ö, —Ç–æ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –µ—Å—Ç—å, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≥—É–≥–ª–∏—Ç—å üôÇ –ó–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Å–æ—Ç—ã—Ö -  —Å—É–ø–µ—Ä-—Ä–µ—Å–ø–µ–∫—Ç!
 
    –§—É–Ω–∫—Ü–∏–∏ - –î–û–ú–ê–®–ö–ê
    –î–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –¥–æ–º–∞—à–∫–µ:
    –¢–∞–π–º–∫–æ–¥: 1:07:17

    –î–û–ü–û–õ–ù–ï–ù–ò–ï –ü–û –í–´–í–û–î–£:
    –î–æ–±–∞–≤—å—Ç–µ –≤ –≤—ã–≤–æ–¥ –µ—â–µ –∏ –≤–æ–∑—Ä–∞—Å—Ç

    –ü—Ä–∏–º–µ—Ä—ã –≤—ã–≤–æ–¥–∞:

    "–ê–ª–µ–∫—Å–µ–π, 25 –ª–µ—Ç: –ò–ú–¢ = 22.5 \n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –≤–µ—Å –≤ –Ω–æ—Ä–º–µ!"

    * –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ 25 –ª–µ—Ç, –Ω–æ 21 –≥–æ–¥ üôÇ
    –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–æ–π, –∫—Ç–æ —Ä–µ—à–∏—Ç, —Ç–æ–º—É —Å—É–ø–µ—Ä-–ø—É–ø–µ—Ä -—Ä–µ—Å–ø–µ–∫—Ç!

    –ü—Ä–∏ –≤—ã–≤–æ–¥–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å "–≥–æ–¥" –∏–ª–∏ "–ª–µ—Ç"
    –ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫ —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.
    P.S. –í–∞–º –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º, –≥–ª–∞–≤–Ω–æ–µ, –Ω–∞–π—Ç–∏ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å üôÇ
 
*/

// MARK: 01
func task01JustFunction() {
    print("Just function")
}
task01JustFunction()


func task01ReturnDouble(a: Int, b: Int) -> Double {
    return Double(a + b)
}
task01ReturnDouble(a: 1, b: 2)


func task01Variadic(a: Int, b: Int..., c: String...) {
    print(a)
    
    b.forEach { print($0) }
    
    c.forEach { print($0) }
}
task01Variadic(a: 1, b: 1,2,3, c: "Oleg", "Mary")


func task01ReturnFloat(_ nums: Float...) -> [Float] {
    var arr: [Float] = []
    
    nums.forEach { arr.append($0) }
    
    return arr.sorted(by: <)
}
task01ReturnFloat(1.0, 2.0, 3.0)


func task01ReturnDict(_ key: Int, UserName name: String, _ surname: String = "") -> [Int: (String, String)] {
    return [key: (name, surname)]
}
task01ReturnDict(1, UserName: "Oleg", "Dmitriev")


// MARK: 02
// –æ—Ç–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤ –±–æ–ª—å—à—É—é –∏–ª–∏ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–æ—Ä–æ–Ω—É
/// 1.0...1.4 => 1 / 1.5...1.9 => 2
var task02Round: Double = round(1.4)

// –æ—Ç–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
var task02Floor: Double = floor(1.8)

// –æ—Ç–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
var task02Ceil: Double = ceil(1.2)


// MARK: 03
func healthBMI(_ num: Double) -> String {
    let small: Double = 18.5
    let big: Double = 29.9
    
    var res = ""
    
    if num < small {
        res += "–°—Ä–æ—á–Ω–æ –∫—É—à–∞—Ç—å! \n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞ :("
    } else if num > big {
        res += "–£ –≤–∞—Å –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –∏–∑–ª–∏—à–∫–∏, –ø—Ä–∏–º–∏—Ç–µ –º–µ—Ä—ã!"
    } else {
        res += "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –≤–µ—Å –≤ –Ω–æ—Ä–º–µ!"
    }
    
    return res
}

func calculateAge(_ age: Int) -> String {
    let lastOne: Int = age % 10
    let lastTwo: Int = age % 100
    
    var res = ""

    if (11...14).contains(lastTwo) {
        res += "\(age) –ª–µ—Ç"
    }
    
    switch lastOne {
    case 1: res += "\(age) –≥–æ–¥"
    case 2...4: res += "\(age) –≥–æ–¥–∞"
    default: res += "\(age) –ª–µ—Ç"
    }
    
    return res
}

func userData(name: String, age: Int, height: Double, weight: Double) -> String {
    let bmi = weight / (height * height)
    
    let years: String = calculateAge(age)
    
    let roundedBMI = String(format: "%.2f", bmi)
    
    let comments: String = healthBMI(bmi)
    
    return "\(name), \(years): –ò–ú–¢ = \(roundedBMI) \n\(comments)"
}

let user01 = userData(name: "Oleg", age: 34, height: 1.84, weight: 84.4)
print(user01)
